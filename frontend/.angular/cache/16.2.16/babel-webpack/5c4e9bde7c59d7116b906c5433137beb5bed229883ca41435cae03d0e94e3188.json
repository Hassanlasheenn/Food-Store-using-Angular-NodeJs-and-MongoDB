{"ast":null,"code":"import { BehaviorSubject, take } from \"rxjs\";\nimport { User } from \"../shared/models/User\";\nimport { USER_LOGIN_URL, USER_REGISTER_URL } from \"../shared/constants/api-urls\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst USER_KEY = 'User';\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    set setUser(value) {\n      this.userSubject.next(value);\n    }\n    get getUser() {\n      return this.userSubject.asObservable();\n    }\n    get currentUser() {\n      return this.userSubject.value;\n    }\n    getUserLocalStorage() {\n      const userJson = localStorage.getItem(USER_KEY);\n      if (userJson) return JSON.parse(userJson);\n      return new User();\n    }\n    constructor(_http) {\n      this._http = _http;\n      this.userSubject = new BehaviorSubject(this.getUserLocalStorage());\n    }\n    setUserLocalStorage(user) {\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n    login(userLogin) {\n      return this._http.post(USER_LOGIN_URL, userLogin).pipe(take(1));\n    }\n    logout() {\n      this.userSubject.next(new User());\n      localStorage.removeItem(USER_KEY);\n    }\n    isLoggedIn() {\n      return !!this.getUserLocalStorage();\n    }\n    register(userRegister) {\n      return this._http.post(USER_REGISTER_URL, userRegister).pipe(take(1));\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}