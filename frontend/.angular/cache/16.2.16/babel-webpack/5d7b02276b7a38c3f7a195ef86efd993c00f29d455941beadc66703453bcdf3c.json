{"ast":null,"code":"import _asyncToGenerator from \"/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/order.service\";\nimport * as i2 from \"src/app/services/cart.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nexport class PaypalButtonComponent {\n  constructor(_orderService, _cartService, _router, _toastrService) {\n    this._orderService = _orderService;\n    this._cartService = _cartService;\n    this._router = _router;\n    this._toastrService = _toastrService;\n    this._destroy$ = new Subject();\n  }\n  ngOnInit() {\n    var _this = this;\n    const self = this;\n    paypal.Buttons({\n      createOrder: (data, actions) => {\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              currency_code: 'USD',\n              value: self.order.totalPrice\n            }\n          }]\n        });\n      },\n      onApprove: function () {\n        var _ref = _asyncToGenerator(function* (data, actions) {\n          const payment = yield actions.order.capture();\n          _this.order.paymentId = payment.id;\n          self._orderService.pay(_this.order).subscribe({\n            next: orderId => {\n              _this._cartService.clearCart();\n              _this._router.navigateByUrl('/track/' + orderId);\n              _this._toastrService.success('Payment done successfully', 'Success');\n            },\n            error: err => {\n              _this._toastrService.error('Payment Failed', 'Error');\n            }\n          });\n        });\n        return function onApprove(_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    });\n  }\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n  static {\n    this.ɵfac = function PaypalButtonComponent_Factory(t) {\n      return new (t || PaypalButtonComponent)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.CartService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PaypalButtonComponent,\n      selectors: [[\"paypal-button\"]],\n      inputs: {\n        order: \"order\"\n      },\n      decls: 2,\n      vars: 0,\n      template: function PaypalButtonComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"paypal-button works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Subject","PaypalButtonComponent","constructor","_orderService","_cartService","_router","_toastrService","_destroy$","ngOnInit","_this","self","paypal","Buttons","createOrder","data","actions","order","create","purchase_units","amount","currency_code","value","totalPrice","onApprove","_ref","_asyncToGenerator","payment","capture","paymentId","id","pay","subscribe","next","orderId","clearCart","navigateByUrl","success","error","err","_x","_x2","apply","arguments","ngOnDestroy","complete","i0","ɵɵdirectiveInject","i1","OrderService","i2","CartService","i3","Router","i4","ToastrService","selectors","inputs","decls","vars","template","PaypalButtonComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/components/paypal-button/paypal-button.component.ts","/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/components/paypal-button/paypal-button.component.html"],"sourcesContent":["import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Order } from 'src/app/shared/models/Order';\n\ndeclare var paypal: any;\n\n@Component({\n  selector: 'paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.scss']\n})\nexport class PaypalButtonComponent implements OnInit, OnDestroy {\n  private _destroy$ = new Subject<void>();\n  @Input() order!: Order;\n\n  constructor(\n    private _orderService: OrderService,\n    private _cartService: CartService,\n    private _router: Router,\n    private _toastrService: ToastrService,\n  ) {}\n\n  ngOnInit(): void {\n    const self = this;\n    paypal\n    .Buttons({\n      createOrder: (data: any, actions: any) => {\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: 'USD',\n                value: self.order.totalPrice,\n              }\n            }\n          ],\n        });\n      },\n\n      onApprove: async (data: any, actions: any) => {\n        const payment = await actions.order.capture();\n        this.order.paymentId = payment.id;\n        self._orderService.pay(this.order)\n        .subscribe(\n          {\n            next: (orderId) => {\n              this._cartService.clearCart();\n              this._router.navigateByUrl('/track/' + orderId);\n              this._toastrService.success(\n                'Payment done successfully',\n                'Success'\n              );\n            },\n            error: (err: Error) => {\n              this._toastrService.error('Payment Failed', 'Error');\n            }\n          }\n        )\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n","<p>paypal-button works!</p>\n"],"mappings":";AAGA,SAASA,OAAO,QAAQ,MAAM;;;;;;AAY9B,OAAM,MAAOC,qBAAqB;EAIhCC,YACUC,aAA2B,EAC3BC,YAAyB,EACzBC,OAAe,EACfC,cAA6B;IAH7B,KAAAH,aAAa,GAAbA,aAAa;IACb,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,cAAc,GAAdA,cAAc;IAPhB,KAAAC,SAAS,GAAG,IAAIP,OAAO,EAAQ;EAQpC;EAEHQ,QAAQA,CAAA;IAAA,IAAAC,KAAA;IACN,MAAMC,IAAI,GAAG,IAAI;IACjBC,MAAM,CACLC,OAAO,CAAC;MACPC,WAAW,EAAEA,CAACC,IAAS,EAAEC,OAAY,KAAI;QACvC,OAAOA,OAAO,CAACC,KAAK,CAACC,MAAM,CAAC;UAC1BC,cAAc,EAAE,CACd;YACEC,MAAM,EAAE;cACNC,aAAa,EAAE,KAAK;cACpBC,KAAK,EAAEX,IAAI,CAACM,KAAK,CAACM;;WAErB;SAEJ,CAAC;MACJ,CAAC;MAEDC,SAAS;QAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOX,IAAS,EAAEC,OAAY,EAAI;UAC3C,MAAMW,OAAO,SAASX,OAAO,CAACC,KAAK,CAACW,OAAO,EAAE;UAC7ClB,KAAI,CAACO,KAAK,CAACY,SAAS,GAAGF,OAAO,CAACG,EAAE;UACjCnB,IAAI,CAACP,aAAa,CAAC2B,GAAG,CAACrB,KAAI,CAACO,KAAK,CAAC,CACjCe,SAAS,CACR;YACEC,IAAI,EAAGC,OAAO,IAAI;cAChBxB,KAAI,CAACL,YAAY,CAAC8B,SAAS,EAAE;cAC7BzB,KAAI,CAACJ,OAAO,CAAC8B,aAAa,CAAC,SAAS,GAAGF,OAAO,CAAC;cAC/CxB,KAAI,CAACH,cAAc,CAAC8B,OAAO,CACzB,2BAA2B,EAC3B,SAAS,CACV;YACH,CAAC;YACDC,KAAK,EAAGC,GAAU,IAAI;cACpB7B,KAAI,CAACH,cAAc,CAAC+B,KAAK,CAAC,gBAAgB,EAAE,OAAO,CAAC;YACtD;WACD,CACF;QACH,CAAC;QAAA,gBAnBDd,SAASA,CAAAgB,EAAA,EAAAC,GAAA;UAAA,OAAAhB,IAAA,CAAAiB,KAAA,OAAAC,SAAA;QAAA;MAAA;KAoBV,CAAC;EACJ;EAEAC,WAAWA,CAAA;IACT,IAAI,CAACpC,SAAS,CAACyB,IAAI,EAAE;IACrB,IAAI,CAACzB,SAAS,CAACqC,QAAQ,EAAE;EAC3B;;;uBAtDW3C,qBAAqB,EAAA4C,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAO,EAAA,CAAAC,aAAA;IAAA;EAAA;;;YAArBrD,qBAAqB;MAAAsD,SAAA;MAAAC,MAAA;QAAAxC,KAAA;MAAA;MAAAyC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCflChB,EAAA,CAAAkB,cAAA,QAAG;UAAAlB,EAAA,CAAAmB,MAAA,2BAAoB;UAAAnB,EAAA,CAAAoB,YAAA,EAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}