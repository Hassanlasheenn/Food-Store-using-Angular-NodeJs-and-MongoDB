{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LocationService {\n  constructor(_http) {\n    this._http = _http;\n    this.NOMINATIM_URL = 'https://nominatim.openstreetmap.org/reverse';\n  }\n  getCurrentLocation() {\n    return new Observable(observer => {\n      if (!navigator.geolocation) return;\n      return navigator.geolocation.getCurrentPosition(pos => {\n        observer.next({\n          lat: pos.coords.latitude,\n          lng: pos.coords.longitude\n        });\n      }, err => {\n        observer.error(err);\n      });\n    });\n  }\n  getAddressFromLatLng(lat, lng) {\n    const params = {\n      lat: lat.toString(),\n      lng: lng.toString(),\n      format: 'json'\n    };\n    return this._http.get(this.NOMINATIM_URL, {\n      params\n    });\n    '';\n  }\n  static {\n    this.ɵfac = function LocationService_Factory(t) {\n      return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LocationService,\n      factory: LocationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Observable","LocationService","constructor","_http","NOMINATIM_URL","getCurrentLocation","observer","navigator","geolocation","getCurrentPosition","pos","next","lat","coords","latitude","lng","longitude","err","error","getAddressFromLatLng","params","toString","format","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/services/location.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LatLngLiteral } from 'leaflet';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService {\n  private readonly NOMINATIM_URL = 'https://nominatim.openstreetmap.org/reverse';\n\n  constructor(private _http: HttpClient) {}\n\n  getCurrentLocation(): Observable<LatLngLiteral> {\n    return new Observable((observer) => {\n      if(!navigator.geolocation) return;\n\n      return navigator.geolocation.getCurrentPosition(\n        (pos) => {\n          observer.next({\n            lat: pos.coords.latitude,\n            lng: pos.coords.longitude\n          });\n        },\n        (err) => {\n          observer.error(err);\n        }\n      )\n    })\n  }\n\n  getAddressFromLatLng(lat: number, lng: number): Observable<any> {\n    const params = {\n      lat: lat.toString(),\n      lng: lng.toString(),\n      format: 'json'\n    };\n    return this._http.get<any>(this.NOMINATIM_URL, { params })''\n  }\n}\n"],"mappings":"AAGA,SAASA,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFR,KAAAC,aAAa,GAAG,6CAA6C;EAEtC;EAExCC,kBAAkBA,CAAA;IAChB,OAAO,IAAIL,UAAU,CAAEM,QAAQ,IAAI;MACjC,IAAG,CAACC,SAAS,CAACC,WAAW,EAAE;MAE3B,OAAOD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAC5CC,GAAG,IAAI;QACNJ,QAAQ,CAACK,IAAI,CAAC;UACZC,GAAG,EAAEF,GAAG,CAACG,MAAM,CAACC,QAAQ;UACxBC,GAAG,EAAEL,GAAG,CAACG,MAAM,CAACG;SACjB,CAAC;MACJ,CAAC,EACAC,GAAG,IAAI;QACNX,QAAQ,CAACY,KAAK,CAACD,GAAG,CAAC;MACrB,CAAC,CACF;IACH,CAAC,CAAC;EACJ;EAEAE,oBAAoBA,CAACP,GAAW,EAAEG,GAAW;IAC3C,MAAMK,MAAM,GAAG;MACbR,GAAG,EAAEA,GAAG,CAACS,QAAQ,EAAE;MACnBN,GAAG,EAAEA,GAAG,CAACM,QAAQ,EAAE;MACnBC,MAAM,EAAE;KACT;IACD,OAAO,IAAI,CAACnB,KAAK,CAACoB,GAAG,CAAM,IAAI,CAACnB,aAAa,EAAE;MAAEgB;IAAM,CAAE,CAAC;IAAA,EAAE;EAC9D;;;uBA9BWnB,eAAe,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAf1B,eAAe;MAAA2B,OAAA,EAAf3B,eAAe,CAAA4B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}