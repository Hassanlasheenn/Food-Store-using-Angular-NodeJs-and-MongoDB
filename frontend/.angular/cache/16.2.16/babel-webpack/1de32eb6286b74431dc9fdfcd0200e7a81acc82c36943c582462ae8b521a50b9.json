{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.darkMode = new BehaviorSubject(false);\n    this.currentTheme = this.darkMode.asObservable();\n  }\n  toggleTheme() {\n    this.darkMode.next(!this.darkMode.value);\n  }\n  setTheme(isDark) {\n    this.darkMode.next(isDark);\n  }\n  static {\n    this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ThemeService","constructor","darkMode","currentTheme","asObservable","toggleTheme","next","value","setTheme","isDark","factory","ɵfac","providedIn"],"sources":["/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/services/theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private darkMode = new BehaviorSubject<boolean>(false);\n  currentTheme = this.darkMode.asObservable();\n\n  constructor() { }\n\n  toggleTheme(): void {\n    this.darkMode.next(!this.darkMode.value);\n  }\n\n  setTheme(isDark: boolean): void {\n    this.darkMode.next(isDark);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,YAAY;EAIvBC,YAAA;IAHQ,KAAAC,QAAQ,GAAG,IAAIH,eAAe,CAAU,KAAK,CAAC;IACtD,KAAAI,YAAY,GAAG,IAAI,CAACD,QAAQ,CAACE,YAAY,EAAE;EAE3B;EAEhBC,WAAWA,CAAA;IACT,IAAI,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,IAAI,CAACJ,QAAQ,CAACK,KAAK,CAAC;EAC1C;EAEAC,QAAQA,CAACC,MAAe;IACtB,IAAI,CAACP,QAAQ,CAACI,IAAI,CAACG,MAAM,CAAC;EAC5B;;;uBAZWT,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAU,OAAA,EAAZV,YAAY,CAAAW,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}