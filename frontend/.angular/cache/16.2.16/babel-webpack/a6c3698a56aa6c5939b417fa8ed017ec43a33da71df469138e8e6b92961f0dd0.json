{"ast":null,"code":"import { BehaviorSubject, take } from \"rxjs\";\nimport { User } from \"../shared/models/User\";\nimport { USER_LOGIN_URL, USER_REGISTER_URL } from \"../shared/constants/api-urls\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst USER_KEY = 'User';\nexport class UserService {\n  set setUser(value) {\n    this.userSubject.next(value);\n  }\n  get getUser() {\n    return this.userSubject.asObservable();\n  }\n  get currentUser() {\n    return this.userSubject.value;\n  }\n  getUserLocalStorage() {\n    const userJson = localStorage.getItem(USER_KEY);\n    if (userJson) return JSON.parse(userJson);\n    return new User();\n  }\n  constructor(_http) {\n    this._http = _http;\n    this.userSubject = new BehaviorSubject(this.getUserLocalStorage());\n  }\n  setUserLocalStorage(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  login(userLogin) {\n    return this._http.post(USER_LOGIN_URL, userLogin).pipe(take(1));\n  }\n  logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem(USER_KEY);\n  }\n  isLoggedIn() {\n    return !!this.getUserLocalStorage();\n  }\n  register(userRegister) {\n    return this._http.post(USER_REGISTER_URL, userRegister).pipe(take(1));\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","take","User","USER_LOGIN_URL","USER_REGISTER_URL","USER_KEY","UserService","setUser","value","userSubject","next","getUser","asObservable","currentUser","getUserLocalStorage","userJson","localStorage","getItem","JSON","parse","constructor","_http","setUserLocalStorage","user","setItem","stringify","login","userLogin","post","pipe","logout","removeItem","isLoggedIn","register","userRegister","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/services/user.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, catchError, Observable, take, throwError } from \"rxjs\";\nimport { User } from \"../shared/models/User\";\nimport { IUserLogin } from \"../shared/interfaces/IUserLogin\";\nimport { USER_LOGIN_URL, USER_REGISTER_URL } from \"../shared/constants/api-urls\";\nimport { IUserRegister } from \"../shared/interfaces/IUserRegister\";\n\nconst USER_KEY = 'User';\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserService {\n    private userSubject = new BehaviorSubject<User>(this.getUserLocalStorage());\n\n    set setUser(value: User) {\n        this.userSubject.next(value);\n    }\n\n    get getUser(): Observable<User> {\n        return this.userSubject.asObservable();\n    }\n\n    get currentUser(): User {\n        return this.userSubject.value;\n    }\n\n    private getUserLocalStorage(): User {\n        const userJson = localStorage.getItem(USER_KEY);\n        if(userJson) return JSON.parse(userJson) as User;\n        return new User();\n    }\n\n    constructor(\n        private _http: HttpClient,\n    ) {}\n\n    setUserLocalStorage(user: User) {\n        localStorage.setItem(USER_KEY, JSON.stringify(user));\n    }\n    \n    login(userLogin: IUserLogin): Observable<User> {\n        return this._http\n        .post<User>(USER_LOGIN_URL, userLogin)\n        .pipe(take(1));\n    }\n\n    logout(): void {\n        this.userSubject.next(new User);\n        localStorage.removeItem(USER_KEY);\n    }\n\n    isLoggedIn(): boolean {\n        return !!this.getUserLocalStorage();\n    }    \n\n    register(userRegister: IUserRegister): Observable<IUserRegister> {\n        return this._http\n        .post<IUserRegister>(USER_REGISTER_URL, userRegister)\n        .pipe(take(1));\n    }\n}"],"mappings":"AAEA,SAASA,eAAe,EAA0BC,IAAI,QAAoB,MAAM;AAChF,SAASC,IAAI,QAAQ,uBAAuB;AAE5C,SAASC,cAAc,EAAEC,iBAAiB,QAAQ,8BAA8B;;;AAGhF,MAAMC,QAAQ,GAAG,MAAM;AAIvB,OAAM,MAAOC,WAAW;EAGpB,IAAIC,OAAOA,CAACC,KAAW;IACnB,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,KAAK,CAAC;EAChC;EAEA,IAAIG,OAAOA,CAAA;IACP,OAAO,IAAI,CAACF,WAAW,CAACG,YAAY,EAAE;EAC1C;EAEA,IAAIC,WAAWA,CAAA;IACX,OAAO,IAAI,CAACJ,WAAW,CAACD,KAAK;EACjC;EAEQM,mBAAmBA,CAAA;IACvB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAACZ,QAAQ,CAAC;IAC/C,IAAGU,QAAQ,EAAE,OAAOG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAS;IAChD,OAAO,IAAIb,IAAI,EAAE;EACrB;EAEAkB,YACYC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IArBT,KAAAZ,WAAW,GAAG,IAAIT,eAAe,CAAO,IAAI,CAACc,mBAAmB,EAAE,CAAC;EAsBxE;EAEHQ,mBAAmBA,CAACC,IAAU;IAC1BP,YAAY,CAACQ,OAAO,CAACnB,QAAQ,EAAEa,IAAI,CAACO,SAAS,CAACF,IAAI,CAAC,CAAC;EACxD;EAEAG,KAAKA,CAACC,SAAqB;IACvB,OAAO,IAAI,CAACN,KAAK,CAChBO,IAAI,CAAOzB,cAAc,EAAEwB,SAAS,CAAC,CACrCE,IAAI,CAAC5B,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;EAEA6B,MAAMA,CAAA;IACF,IAAI,CAACrB,WAAW,CAACC,IAAI,CAAC,IAAIR,IAAI,CAAJ,CAAI,CAAC;IAC/Bc,YAAY,CAACe,UAAU,CAAC1B,QAAQ,CAAC;EACrC;EAEA2B,UAAUA,CAAA;IACN,OAAO,CAAC,CAAC,IAAI,CAAClB,mBAAmB,EAAE;EACvC;EAEAmB,QAAQA,CAACC,YAA2B;IAChC,OAAO,IAAI,CAACb,KAAK,CAChBO,IAAI,CAAgBxB,iBAAiB,EAAE8B,YAAY,CAAC,CACpDL,IAAI,CAAC5B,IAAI,CAAC,CAAC,CAAC,CAAC;EAClB;;;uBAhDSK,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXhC,WAAW;MAAAiC,OAAA,EAAXjC,WAAW,CAAAkC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}