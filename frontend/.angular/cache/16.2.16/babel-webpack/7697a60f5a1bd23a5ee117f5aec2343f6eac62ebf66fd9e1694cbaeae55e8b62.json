{"ast":null,"code":"import { icon, map, marker, tileLayer } from 'leaflet';\nimport { Subject, takeUntil } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/location.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"map\"];\nfunction MapComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function MapComponent_ng_container_1_Template_div_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.findMyLocation());\n    });\n    i0.ɵɵelement(2, \"img\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r0.locationIcon, i0.ɵɵsanitizeUrl);\n  }\n}\nexport let MapComponent = /*#__PURE__*/(() => {\n  class MapComponent {\n    set addressLatLng(latlng) {\n      //this is for the mongodb as it does not accept a float number with more than 8 floating points\n      if (!latlng.lat.toFixed) return;\n      latlng.lat = parseFloat(latlng.lat.toFixed(8));\n      latlng.lng = parseFloat(latlng.lng.toFixed(8));\n      this.order.addressLatLng = latlng;\n    }\n    get addressLatLng() {\n      return this.order.addressLatLng;\n    }\n    constructor(_locationService) {\n      this._locationService = _locationService;\n      this.readonly = false;\n      this._destroy$ = new Subject();\n      this.DEFAULT_LATLNG = [30.093923, 31.3338075];\n      this.MARKER_ZOOM_LEVEL = 16;\n      this.MARKER_ICON = icon({\n        iconUrl: 'https://res.cloudinary.com/foodmine/image/upload/v1638842791/map/marker_kbua9q.png',\n        iconSize: [42, 42],\n        iconAnchor: [21, 42]\n      });\n      this.locationIcon = '../../../assets/icons/my-location-svgrepo-com.svg';\n    }\n    ngOnChanges() {\n      if (!this.order) return;\n      this.initializeMap();\n      if (this.readonly && this.addressLatLng) {\n        this.showLocationOnReadOnly();\n      }\n    }\n    showLocationOnReadOnly() {\n      const map = this.map;\n      this.setMarker(this.addressLatLng);\n      map.setView(this.addressLatLng, this.MARKER_ZOOM_LEVEL);\n      map.dragging.disable();\n      map.touchZoom.disable();\n      map.doubleClickZoom.disable();\n      map.scrollWheelZoom.disable();\n      map.boxZoom.disable();\n      map.keyboard.disable();\n      map.off('click');\n      map.tapHold?.disable();\n      this.currentMarker.dragging?.disable();\n    }\n    initializeMap() {\n      if (this.map) return;\n      this.map = map(this.mapRef.nativeElement, {\n        attributionControl: false\n      }).setView(this.DEFAULT_LATLNG, 2.5);\n      tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(this.map);\n      this.map.on('click', e => {\n        this.setMarker(e.latlng);\n      });\n    }\n    findMyLocation() {\n      this._locationService.getCurrentLocation().pipe(takeUntil(this._destroy$)).subscribe({\n        next: latlng => {\n          this.map.setView(latlng, this.MARKER_ZOOM_LEVEL);\n          this.setMarker(latlng);\n        }\n      });\n    }\n    setMarker(latlng) {\n      this.addressLatLng = latlng;\n      if (this.currentMarker) {\n        this.currentMarker.setLatLng(latlng);\n        return;\n      }\n      this.currentMarker = marker(latlng, {\n        draggable: true,\n        icon: this.MARKER_ICON\n      }).addTo(this.map);\n      this.currentMarker.on('dragend', () => {\n        this.addressLatLng = this.currentMarker.getLatLng();\n      });\n    }\n    ngOnDestroy() {\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    static {\n      this.ɵfac = function MapComponent_Factory(t) {\n        return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.LocationService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: MapComponent,\n        selectors: [[\"map\"]],\n        viewQuery: function MapComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 7);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapRef = _t.first);\n          }\n        },\n        inputs: {\n          order: \"order\",\n          readonly: \"readonly\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 4,\n        vars: 1,\n        consts: [[1, \"container\"], [4, \"ngIf\"], [1, \"map\"], [\"map\", \"\"], [1, \"find-location\", 3, \"click\"], [\"alt\", \"icon\", 3, \"src\"]],\n        template: function MapComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵtemplate(1, MapComponent_ng_container_1_Template, 3, 1, \"ng-container\", 1);\n            i0.ɵɵelement(2, \"div\", 2, 3);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", !ctx.readonly);\n          }\n        },\n        dependencies: [i2.NgIf],\n        styles: [\".container[_ngcontent-%COMP%]{position:relative;width:35rem;height:22rem;text-align:center}.map[_ngcontent-%COMP%]{width:100%;height:100%}.find-location[_ngcontent-%COMP%]{position:absolute;margin:auto;top:90%;left:95%;z-index:1000;cursor:pointer}.find-location[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem}\"]\n      });\n    }\n  }\n  return MapComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}