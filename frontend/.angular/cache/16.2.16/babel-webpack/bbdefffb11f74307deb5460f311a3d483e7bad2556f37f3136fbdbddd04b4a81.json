{"ast":null,"code":"import { HttpEventType } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/loading.service\";\nvar pendingRequest = 0;\nexport class LoadingInterceptor {\n  constructor(_loadingService) {\n    this._loadingService = _loadingService;\n  }\n  intercept(request, next) {\n    return next.handle(request).pipe(tap({\n      next: event => {\n        if (event.type === HttpEventType.Response) {\n          this.handleHideLoading();\n        }\n      },\n      error: _ => {\n        this.handleHideLoading();\n      }\n    }));\n  }\n  handleHideLoading() {\n    this._loadingService.isLoading.subscribe(value => {\n      if (value) {\n        pendingRequest++;\n      } else {\n        pendingRequest--;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function LoadingInterceptor_Factory(t) {\n      return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoadingInterceptor,\n      factory: LoadingInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["HttpEventType","tap","pendingRequest","LoadingInterceptor","constructor","_loadingService","intercept","request","next","handle","pipe","event","type","Response","handleHideLoading","error","_","isLoading","subscribe","value","i0","ɵɵinject","i1","LoadingService","factory","ɵfac"],"sources":["/Users/hazemalaa/Desktop/Food-Store-using-Angular-NodeJs-and-MongoDB/frontend/src/app/shared/interceptors/loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpEventType\n} from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { LoadingService } from 'src/app/services/loading.service';\n\nvar pendingRequest = 0;\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n  constructor(private _loadingService: LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request)\n    .pipe(\n      tap(\n        {\n          next: (event) => {\n            if(event.type === HttpEventType.Response) {\n              this.handleHideLoading();\n            }\n          },\n          error: (_) => {\n            this.handleHideLoading();\n          }\n        }\n      )\n    );\n  }\n\n  handleHideLoading() {\n    this._loadingService.isLoading.subscribe((value: boolean) => {\n      if(value) {\n        pendingRequest++;\n      } else {\n        pendingRequest--;\n      }\n    })\n  }\n}\n"],"mappings":"AACA,SAKEA,aAAa,QACR,sBAAsB;AAC7B,SAAqBC,GAAG,QAAQ,MAAM;;;AAGtC,IAAIC,cAAc,GAAG,CAAC;AAEtB,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,eAA+B;IAA/B,KAAAA,eAAe,GAAfA,eAAe;EAAmB;EAEtDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAC1BG,IAAI,CACHT,GAAG,CACD;MACEO,IAAI,EAAGG,KAAK,IAAI;QACd,IAAGA,KAAK,CAACC,IAAI,KAAKZ,aAAa,CAACa,QAAQ,EAAE;UACxC,IAAI,CAACC,iBAAiB,EAAE;;MAE5B,CAAC;MACDC,KAAK,EAAGC,CAAC,IAAI;QACX,IAAI,CAACF,iBAAiB,EAAE;MAC1B;KACD,CACF,CACF;EACH;EAEAA,iBAAiBA,CAAA;IACf,IAAI,CAACT,eAAe,CAACY,SAAS,CAACC,SAAS,CAAEC,KAAc,IAAI;MAC1D,IAAGA,KAAK,EAAE;QACRjB,cAAc,EAAE;OACjB,MAAM;QACLA,cAAc,EAAE;;IAEpB,CAAC,CAAC;EACJ;;;uBA9BWC,kBAAkB,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAlBpB,kBAAkB;MAAAqB,OAAA,EAAlBrB,kBAAkB,CAAAsB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}